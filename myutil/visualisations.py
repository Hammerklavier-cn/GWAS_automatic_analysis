import os, sys, logging, subprocess
from typing import Literal
import matplotlib.pyplot as plt
import matplotlib
import pandas as pd
import numpy as np

from Classes import FileManagement

matplotlib.use('Agg')


def missing(
    fm: FileManagement,
    input_name: str,
    save_path_name: str,
    ethnic: str | None = None,
    gender: Literal["Men", "Women"] | None = None
    ) -> None:
    """
    Visualise missing data proportions.
    
    # Args:
    
    **input_name** (str): _Name of the input file._
    
    **save_path_name** (str): _Path to save the visualisations (without suffix and extension)._
    
    # Returns:
    
    **None**
    
    # Generate Files:
    
    **${save_path_name}.imiss**: _Missingness of individuals._
    
    **${save_path_name}.lmiss**: _Missingness of SNPs._
    
    **${save_path_name}_imiss_visualisation.png**: _Visualisation of missingness of individuals._
    
    **${save_path_name}_lmiss_visualisation.png**: _Visualisation of missingness of SNPs._
    """
    logging.basicConfig(level=logging.ERROR, format="%(asctime)s -- %(levelname)s -- %(message)s")
    logging.info("Calculating proportions of missing data of %s %s data set", ethnic, gender)
    try:
        command = [
            fm.plink, 
            "--bfile", input_name, 
            "--missing", 
            "--out", input_name
        ]
        subprocess.run(
            command,
            stdout=subprocess.DEVNULL,
            stderr=None,
            check=True
        )
    except subprocess.CalledProcessError as e:
        logging.error(f"Error calculating proportions of missing data plink: {e}")
        sys.exit(2)
    logging.info("Finished Calculation")
    
    logging.info("Visualising missing data")
    
    # Visualise missingness of individuals.
    logging.info("Visualising missingness of individuals")
    imiss_df = pd.read_csv(f"{input_name}.imiss", sep=r"\s+", usecols=["F_MISS"])

    plt.hist(imiss_df, density=True, bins=20)  
    ## density=True makes bin's raw count divided by the total number of counts and the bin width, 
    ## so that the area under the histogram integrates to 1.
    plt.title(f"Histogram of SNP missingness per individual from {ethnic} {gender} data set")
    plt.xlabel("Individuals' SNP missing rate")
    plt.ylabel("Frequency / Intercept")
    plt.tight_layout()      # Remove whitespace and avoid overlap around the plot.
    plt.savefig(f"{save_path_name}_imiss.png", dpi=300)
    ## clear figure to prevent conflicts.
    plt.clf()
    
    # Visualise missingness of SNPs.
    lmiss_df = pd.read_csv(f"{input_name}.lmiss", engine="c", sep=r"\s+", usecols=["F_MISS"])

    plt.hist(lmiss_df, density=True, bins=20)
    plt.title(f"Histogram of individual missingness per SNP from {ethnic} {gender} data set")
    plt.xlabel("SNPs' individual missing rate")
    plt.ylabel("Frequency / Intercept")
    plt.tight_layout()
    plt.savefig(f"{save_path_name}_lmiss.png", dpi=300)
    plt.clf()

def hardy_weinberg(
    fm: FileManagement,
    input_name: str,
    save_path_name: str,
    ethnic: str | None = None,
    gender: Literal["Men", "Women"] | None = None
) -> None:
    """
    Visualise p-value generated by Hardy Weinberg Equilibrium.
    
    Args:
        **input_name** (str): _Name of the input file._
        **save_path_name** (str): _Path to save the visualisations (without suffix and extension)._
        **ethnic** (str): _Ethnic group of the data set._
        **gender** (str): _Gender of the data set._
    
    Generate Files:
        **${save_path_name}.hwe**: _p-value and other statistical information of Hardy Weinberg Equilibrium._
        **${save_path_name}.png**: _Visualisation of p-value of HWE._
    """
    # Calculate HWE.
    logging.info("Calculating p-value of HWE")
    try:
        command = [
            fm.plink,
            "--bfile", input_name,
            "--hardy",
            "--out", input_name
        ]
        subprocess.run(
            command,
            stdout=subprocess.DEVNULL,
            stderr=None,
            check=True
        )
    except subprocess.CalledProcessError as e:
        logging.error(f"Error running plink: {e}")
        sys.exit(2)
    logging.info("Finished Calculation")
        
    
    # Draw histogram.
    hwe = pd.read_csv(f"{input_name}.hwe", sep=r"\s+", usecols=["P"])
    plt.hist(hwe, bins=10)
    plt.xlabel("p value")
    plt.ylabel("Frequency / Intercept")
    plt.title(f"Histogram of HWE from {ethnic} {gender} data set")
    plt.savefig(f"{save_path_name}.png", dpi=300)
    
    plt.clf()
    '''
    # Zoomed version. Focusing on the severe deviating SNPs.
    zoomed = pd.read_csv(f"{input_name}_zoomhwe.csv", sep=r"\s+", engine="c", header=None, usecols=[8])
    plt.hist(zoomed, bins=20)
    plt.xlabel("p value")
    plt.ylabel("Frequency / Intercept")
    plt.title(f"Histogram of HWE from {ethnic} {gender} data set: severely deviating SNPs only")
    plt.savefig(f"{save_path_name}_zoomhwe.png", dpi=300)
    '''
    plt.clf()

def minor_allele_frequency(
    fm: FileManagement,
    input_name: str,
    save_path_name: str,
    ethnic: str | None = None,
    gender: Literal["Men", "Women"] | None = None
) -> None:
    """
    Visualise minor allele frequency.

    Args:
        **input_name** (str): _Name of the input file._
        **save_path_name** (str): _Path to save the visualisations (without suffix and extension)._
        **ethnic** (str): _Ethnic group of the data set._
        **gender** (str): _Gender of the data set._
    """
    try:
        command = [
            fm.plink,
            "--bfile", input_name,
            "--freq",
            "--out", save_path_name
        ]
        subprocess.run(
            command,
            stdout=subprocess.DEVNULL,
            stderr=None,
            check=True
        )
    except subprocess.CalledProcessError as e:
        logging.error(f"Error running plink: {e}")
        sys.exit(2)
    logging.info("Finished Calculation")

    freq_file = pd.read_csv(
        f"{input_name}.afreq", sep="\t", engine="pyarrow",usecols=["ALT_FREQS"]
    )

    plt.hist(freq_file["ALT_FREQS"],bins=100,range=[0.000001,1])
    plt.title(f"MAF check of {ethnic} {gender} data set")
    plt.savefig(f"{input_name}.png", dpi=300)
    plt.clf()


# 修改了关联性分析可视化的代码，能简单的在服务器上运行
def assoc_visualisation(file_path, err_2_p: float = 0.05):

    if not file_path.endswith('qassoc'):
        return '文件错误'
    file_name = os.path.basename(file_path)
    
    # calculate threshold
    a_m = pd.read_csv(file_path, engine="c", sep=r"\s+", usecols=["SNP", "P"])
    a_m["ID"] = list(range(a_m.shape[0]))
    threshold = err_2_p / a_m.shape[0]

    colors = list(range(a_m.shape[0]))
    x = a_m["ID"]
    y = -np.log10(a_m["P"])

    t_pd = a_m.loc[a_m["P"] < threshold, :]
    # print(t_pd)

    ## 曼哈顿图 (Manhattan Plot)
    plt.style.use('ggplot')  # 设置类似 Seaborn 的样式
    plt.figure(figsize=[10, 5], dpi=300)
    plt.scatter(x, y, s=2, c=y, cmap='viridis', marker="o")

    # 添加标注
    for _, row_ in t_pd.iterrows():
        plt.text(row_["ID"], -np.log10(row_["P"]), row_["SNP"],
                 rotation=30, fontsize=10, ha='left', va='bottom')  # 调整文本对齐方式

    plt.title("Manhattan Plot of Assoc Result of British Males", fontsize=20)
    plt.colorbar(label='-log10(P-value)')

    # 调整边界
    plt.subplots_adjust(left=0.1, right=0.9, top=0.9, bottom=0.1)
    plt.tight_layout()  # 自动调整布局以避免重叠和超出画面
    plt.savefig(f"{file_name}_Manhattan.png")
    plt.close()

    ## QQ图 (QQ-Plot)
    plt.figure(figsize=[5, 5], dpi=300)
    plt.style.use('dark_background')  # 设置类似 Seaborn 的黑色背景样式

    # 理论 -log10(P) 值
    x = np.linspace(0.5 / a_m.shape[0], 1 - 0.5 / a_m.shape[0], a_m.shape[0])
    sorted_p_values = -np.log10(a_m["P"].sort_values(ascending=True))

    plt.scatter(-np.log10(x), sorted_p_values, marker="^", facecolors="none", edgecolors="b")

    # 添加 y=x 的参考线
    max_val = max(-np.log10(x).max(), sorted_p_values.max())
    plt.plot([0, max_val], [0, max_val], color="#E53528", lw=1)

    plt.xlabel("Theoretical -log10(P) Value")
    plt.ylabel("Observed -log10(P) Value")
    plt.title("QQ-Plot of Assoc Result of British Males", fontsize=15)
    plt.savefig(f"{file_name}_QQ.png", dpi=300)
    plt.close()
    print('已输出至：f"{file_name}_QQ.png" 和 "{file_name}_Manhattan.png"中')
